import React, {Component} from 'react'
import { connect } from 'react-redux'
import './logIn.css'
//import '../registr-auth-popup_media.css';
import {validateRegistrationLogIn} from '../../constants/validateConstants'
import { logInRequest } from '../../actions/authenticate'
import { getUserIsLoadingState,getUserIsSignInState } from '../../userSelector'
import PropTypes from 'prop-types'
import $ from "jquery"


const propTypes = {
    isLoading: PropTypes.bool.isRequired,
    logIn: PropTypes.func.isRequired
};

class AuthPopup extends Component {
    constructor(props) {
        super(props);
        this.state = {
            email: '',
            password: '',
            emailValid: false,
            passwordValid: false,
            formValid: false,
            buttonClick: false
        };
    }

    logInOnClick = (event) => {
        this.setState({buttonClick: true});
        if (this.state.formValid) {
            this.props.logIn(this.state.email, this.state.password);
            this.setState({email: '', password: ''});
            this.isLogIn(event);
        }
        event.preventDefault();
        this.isLogIn(event);
    };

    handleChangeInput = (event) => {
        const name = event.target.name;
        const value = event.target.value;
        this.setState({[name]: value}, () => this.validateField(name, value));
    };

    validateField = (fieldName, value) => {
        let emailValid = this.state.emailValid;
        let passwordValid = this.state.passwordValid;
        switch (fieldName) {
            case 'email':
                emailValid = (validateRegistrationLogIn.email).test(value);
                break;
            case 'password':
                passwordValid = (validateRegistrationLogIn.password).test(value);
                break;
            default:
                break;
        }
        this.setState({
            emailValid,
            passwordValid,
            formValid: emailValid && passwordValid
        });
    };

    popupHide(event) {
        $(event.target).closest(".modal").find(".close").trigger("click");
    };

    isLogIn(event) {
        if (this.state.formValid) {
            if(this.props.isSignIn === true){
                console.log("in if isSignIn = " + this.props.isSignIn)
                return false;
            }
            else {
                console.log("in else isLoading = " + this.props.isSignIn)
                this.popupHide(event);
            }
        }
        else {

        }
    }

    render() {
        return (
            <div>
                <form>
                    <div className="modal fade auth-popup" id="auth-popup" tabIndex="-1" role="dialog">
                        <div className="modal-dialog" role="document">
                            <div className="modal-content">
                                <div className="modal-header">
                                    <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                    <h4 className="modal-title">Authorization</h4>
                                </div>
                                <div className="modal-body">
                                    <input  type="email" className="form-control" placeholder="Your e-mail" name="email"
                                           maxLength={30} value={this.state.email} onChange={this.handleChangeInput}/>
                                    <input type="password" className="form-control" placeholder="Your password"
                                           name="password"
                                           maxLength={30} value={this.state.password}
                                           onChange={this.handleChangeInput}/>
                                </div>
                                <div className="error-valid" style={{display: !this.state.buttonClick ? 'none': 'block'}}>
                                    <p style={{display: this.state.emailValid ? 'none': 'block'}}>Email do not correct</p>
                                    <p style={{display: this.state.passwordValid ? 'none': 'block'}}>Password do not correct</p>
                                    <p style={{display: !this.props.logIn ? 'none': 'block'}}>Such user is not exist</p>
                                </div>
                                <div className="modal-footer">
                                    <button type="submit" className="btn btn-primary" disabled={this.props.isLoading}
                                            onClick={this.logInOnClick}>Log in
                                    </button>
                                </div>
                                <div className="modal-link">
                                    <button type="button" className="btn btn-link">I forgot my password
                                    </button>
                                    <button type="button" className="btn btn-link" data-toggle="modal"
                                            data-target="#registr-popup"
                                            onClick={(e) => this.popupHide(e)}>Sign up
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

        );
    }
}

AuthPopup.propTypes = propTypes;

const mapStateToProps = (state) => {
    console.log(state);
    return {
        isLoading: getUserIsLoadingState(state),
        isSignIn: getUserIsSignInState(state)
    };
}

const mapDispatchToProps = (dispatch) => {
    return ({
        logIn: (login, password) => dispatch(logInRequest(login, password))
    });
}

export default connect(mapStateToProps, mapDispatchToProps)(AuthPopup);
